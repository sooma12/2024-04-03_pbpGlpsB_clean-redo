# setwd() to location of files
infile = "USEME_ab17978-T1sgARACaTc-ab17978-T1sgCONaTc-DGE-results.csv"
df = read.csv(infile)
# 4th column in df is fold change.  Extract these
geneList = df[,4] # from geneList, take all rows and grab the values in the fourth column
# Associate gene names with fold changes
names(geneList) = as.character(df[,2]) # Gene IDs (ACX60_) are in 2nd column
# Should be sorted in decreasing order
geneList = sort(geneList, decreasing = TRUE)
# Supposedly it's possible to use enrichKEGG() directly on KEGG IDs
# Need to pass gene IDs like K01731.  I have these in the 17978 annotation table
annotations = "17978_annotations.csv"
anno = read.csv(annotations)
library(dplyr)
# In dplyr package... filter() takes a data frame and logicals.
# filter(anno, Gene %in% names(shortList)) will pull all rows from anno for which the Gene value corresponds to the names in shortList.
# ["K.Number"] at the end pulls the value corresponding to K Number
# Can also use [4] at the end pulls the 4th column which is K Numbers
knums = filter(anno, Gene %in% names(geneList))["K.Number"]
# Change names in geneList to the corresponding KEGG IDs
names(geneList) = knums[,1]
# Delete everything in the environment
rm(list = ls())
# close all open plots in RStudio
graphics.off()
list.of.packages <- c("BiocManager", "reticulate", "XML", "devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
if(!("EBImage" %in% utils::installed.packages())){
print("Installing EBImage.")
BiocManager::install("EBImage")
#BiocManager::install("MaxContrastProjection")
}
require(devtools)
require(EBImage)
require(reticulate)
require(XML)
# Read in Python package for reading czi files
# (Users will be asked to install miniconda
# when starting for the first time)
reticulate::py_install("czifile")
y
# Install readCzi from GitHub ##############################################
devtools::install_github(repo = "https://github.com/SFB-ELAINE/readCzi")
require(readCzi)
# Input file ---------------------------------------------------------------
input_file <- "/Users/mws/Documents/geisinger_lab_research/Data/Microscopy/2023-06-29_click-LOS/wt-nanT-(-kdo+fluor)_gfp-filter_2.czi"
# Reading metadata of czi-file ---------------------------------------------
# Test script for reading metadata of czi-file -----------------------------
df_metadata <- readCziMetadata(input_file = input_file)
directory_of_file <- dirname(input_file)
dir.create(paste(directory_of_file, "/output", sep=""), showWarnings = FALSE)
file_name <- gsub(pattern = "\\.czi", replacement = "", x = basename(input_file))
write.csv(x = df_metadata, file = paste(directory_of_file, "/output/", file_name, "_df_metadata_en.csv", sep=""),
row.names=FALSE)
# Reading metadata of czi-file ---------------------------------------------
# Test script for reading metadata of czi-file -----------------------------
df_metadata <- readCziMetadata(input_file = input_file)
# Input file ---------------------------------------------------------------
input_file <- "/Users/mws/Documents/geisinger_lab_research/Data/Microscopy/2023-06-29_click-LOS/50ms_gfp_wt-nanT-(-kdo+fluor).czi"
# Reading metadata of czi-file ---------------------------------------------
# Test script for reading metadata of czi-file -----------------------------
df_metadata <- readCziMetadata(input_file = input_file)
BiocManager::available()
BiocManager::version()
# install.packages('pheatmap')
# install DESeq if necessary
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# install and load package
# BiocManager::install("DESeq")
BiocManager::install("GSEABase")
# Packages
library(pheatmap)
library(DESeq2)
library(stringr)
library(tidyverse)
library(RColorBrewer)
library(AnnotationDbi)
library(GO.db)
library(GSEAbase)
library(GSEABase)
wd <- '~/Documents/geisinger_lab_research/bioinformatics_in_acinetobacter/rnaSeq/2024-04-03_pbpGlpsB_clean-redo'
setwd(wd)
pbpG_des_output <- read.table("./DES_pbpG_2024-04-04.csv", header=TRUE, sep = ',')
## Read in raw data and prepare feature count table
feature_count <- read.table("./counts.txt", header=TRUE, row.names = 1)
# Grab the count data
data <- feature_count[,6:14]
## Set up column names in feature count data AND prep metadata table with strains and conditions
# Trim column names down to just the sample IDs
column_names <- colnames(data)
column_names <- sub("X.work.geisingerlab.Mark.rnaSeq.2024.04.03_pbpGlpsB_clean.redo.data.mapped.", "", column_names)
column_names <- sub("Aligned.sortedByCoord.out.bam", "", column_names)
column_names
colnames(data) <- column_names
# Use regex to get condition (mutation) from strain IDs
# ".+?(?=_)":   .+?  means "match any character (.) any number of times (+?)"
# (?=_): a positive lookahead: find where the character - is matched
conditions <- str_extract(column_names, ".+?(?=_)")
# Use column_names and conditions to make metadata table
meta <- data.frame(column_names, conditions)
colnames(meta) <- c('id', 'condition')
meta  # Verify that IDs and conditions are as expected
## Load data, pre-filter low-count genes, and relevel to set WT as the reference
des_data <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ condition)
smallestGroupSize <- 3  # should be size of smallest group; I did 3 replicates
keep <- rowSums(counts(des_data) >= 10) >= smallestGroupSize  # keep data where count is >10 in all 3 samples
des_data <- des_data[keep,]
# relevel dds$condition to set WT as the reference
des_data$condition <- relevel(des_data$condition, ref = "WT")
dds <- DESeq(des_data)
normalized_counts <- as.data.frame(counts(dds,normalized =TRUE))
# Load term2gene with GO IDs and acx locus tags.  This was created from EG functional annotations spreadsheet.
term2gene <- read.csv("/Users/mws/Documents/geisinger_lab_research/bioinformatics_in_acinetobacter/chip-seq_for_nicole/2024-02_nicole_chip_gsea_newtargetslist/term2files/term2gene_ab17978.csv")
term2name <- read.csv("/Users/mws/Documents/geisinger_lab_research/bioinformatics_in_acinetobacter/chip-seq_for_nicole/2024-02_nicole_chip_gsea_newtargetslist/term2files/term2name.csv")
# use gene_list to subset term2gene, grabbing all GO IDs that correspond to genes in gene_list.
# Then, add go ontologies
go_terms_in_genelist <- term2gene[term2gene$Gene %in% pbpG_sig_genes, ]
go_terms_in_genelist <- go_terms_in_genelist[go_terms_in_genelist$GOID != "", ]
# Packages
library(dplyr)
# use gene_list to subset term2gene, grabbing all GO IDs that correspond to genes in gene_list.
# Then, add go ontologies
go_terms_in_genelist <- term2gene[term2gene$Gene %in% pbpG_sig_genes, ]
# Start with pbpG. Get sig diff expressed genes
pbpG_des_output <- pbpG_des_output[order(pbpG_des_output$padj),]
pbpG_sig_genes <- pbpG_des_output$X[pbpG_des_output$padj < 0.1 & abs(pbpG_des_output$log2FoldChange) > 0.5]
# use gene_list to subset term2gene, grabbing all GO IDs that correspond to genes in gene_list.
# Then, add go ontologies
go_terms_in_genelist <- term2gene[term2gene$Gene %in% pbpG_sig_genes, ]
go_terms_in_genelist <- go_terms_in_genelist[go_terms_in_genelist$GOID != "", ]
View(go_terms_in_genelist)
# Get all GOID:ontology pairs (CC, BP, MF) from the gene list
goid_to_ontology <- AnnotationDbi::select(GO.db, keys = go_terms_in_genelist$GOID, keytype="GOID", columns=c("ONTOLOGY"))
# Apparently that contains a lot of duplicates... drop them
goid_ontology_uniques <- goid_to_ontology %>% distinct(GOID, ONTOLOGY, .keep_all = TRUE)
# Add ontologies to gene list with go terms.  Note that there are some "NA" ontologies somehow...
go_table_ont <- left_join(go_terms_in_genelist, goid_ontology_uniques, by="GOID")
# subset gene lists by filtering ontologies
gene_table_bp <- go_table_ont[go_table_ont$ONTOLOGY == "BP",] %>% na.omit()
gene_list_bp <- gene_table_bp$Gene
gene_table_mf <- go_table_ont[go_table_ont$ONTOLOGY == "MF",] %>% na.omit()
gene_list_mf <- gene_table_mf$Gene
# Add GO terms (e.g. "peptidoglycan turnover")
gene_table_bp <- left_join(gene_table_bp, term2name, by="GOID")
gene_table_mf <- left_join(gene_table_mf, term2name, by="GOID")
View(gene_table_bp)
View(gene_table_mf)
# Load GO slims from QuickGO goslim_prokaryote
bp_goslim = read.csv("~/Documents/geisinger_lab_research/bioinformatics_in_acinetobacter/REFERENCE/goslim_prokaryote_quickGO/goslim_prokaryote_bp.csv")
cc_goslim = read.csv("~/Documents/geisinger_lab_research/bioinformatics_in_acinetobacter/REFERENCE/goslim_prokaryote_quickGO/goslim_prokaryote_cc.csv")
mf_goslim = read.csv("~/Documents/geisinger_lab_research/bioinformatics_in_acinetobacter/REFERENCE/goslim_prokaryote_quickGO/goslim_prokaryote_mf.csv")
?goSlim
GoCollection(bp_goslim$GOID)
GOCollection(bp_goslim$GOID)
bp_slim_collection <- goSlim(bp_goslim$GOID)
bp_slim_collection <- GOCollection(bp_goslim$GOID)
cc_slim_collection <- GOCollection(cc_goslim$GOID)
mf_slim_collection <- GOCollection(mf_goslim$GOID)
go_table_ont
gene_table_bp
gene_table_bp$GOID
goSlim(bp_pbpG_collection, bp_slim_collection, "BP")
data("sample.ExpressionSet")
View(sample.ExpressionSet)
bp_pbpG_collection <- GOCollection(gene_table_bp$GOID)
goSlim(bp_pbpG_collection, bp_slim_collection, "BP")
bp_slim_df <- goSlim(bp_pbpG_collection, bp_slim_collection, "BP")
View(bp_slim_df)
mf_pbpG_collection <- GOCollection(gene_table_mf$GOID)
mf_slim_df <- goSlim(mf_pbpG_collection, mf_slim_collection, "MF")
View(mf_goslim)
View(mf_slim_df)
# Prepare counts/DESeq data for heatmap
vsd <- vst(dds, blind=FALSE)
gomap <- as.list(GOMFOFFSPRING[rownames(bp_slim_df)])
GOMOFFSPRING
GO.db::OMFOFFSPRING
GO.db::GOMFOFFSPRING
gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(bp_slim_df)])
gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(mf_slim_df)])
View(gomap)
tryCatch({
bp_gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(bp_slim_df)])
}, error = function(e) {
print(error)
})
tryCatch({
bp_gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(bp_slim_df)])
}, error = function(e) {})
an.error.occured <- FALSE
tryCatch( { mf_gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(mf_slim_df)]); print(res) }
, error = function(e) {an.error.occured <<- TRUE})
print(an.error.occured)
mf_gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(mf_slim_df)])
an.error.occured <- FALSE
tryCatch( { bp_gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(bp_slim_df)]); print(res) }
, error = function(e) {an.error.occured <<- TRUE})
print(an.error.occured)
bp_gomap <- as.list(GO.db::GOMFOFFSPRING[rownames(bp_slim_df)])
rownames(bp_slim_df)
bp_gomap <- as.list(GO.db::GOBPOFFSPRING[rownames(bp_slim_df)])
lapply(bp_gomap, intersect, bp_pbpG_collection)
lapply(bp_gomap, intersect, gene_table_bp$GOID)
View(bp_slim_df)
str(bp_gomap)
View(gene_table_bp)
View(bp_slim_df)
mapped <-
lapply(bp_gomap, intersect, gene_table_bp$GOID)
mapped
vapply(unname(mapped), paste, collapse = ";", character(1L))
bp_gomap
bp_gomap
mf_gomap
type(bp_gomap)
vapply(unname(mapped), paste, collapse = ";", character(1L))
match(gene_table_bp$GOID, names(bp_gomap))
as.data.frame(bp_gomap)
?match
View(mapped)
View(bp_slim_df)
bp_gomap
View(go_table_ont)
View(bp_slim_df)
GO.db::GOBPOFFSPRING[rownames(bp_slim_df)]
bp_gomap
mapped <- lapply(bp_gomap, intersect, gene_table_bp$GOID)
unname(mapped)
vapply(unname(mapped), paste, collapse = ";", character(1L))
stack(bp_gomap)
mf_gomap_2_df <- stack(mf_gomap)
bp_gomap_2_df <- stack(bp_gomap)
bp_gomap_2_df$ind[bp_gomap_2_df$values == gene_table_bp$GOID]
bp_gomap_2_df$values
gene_table_bp$GOID
bp_gomap_2_df$ind[bp_gomap_2_df$values == gene_table_bp$GOID]
bp_gomap_2_df$ind[bp_gomap_2_df$values == "GO:0042158"]
View(bp_gomap_2_df)
c('GO:0009072', 'GO:0006417', 'GO:0006355')
bp_gomap_2_df$ind[bp_gomap_2_df$values %in% c('GO:0009072', 'GO:0006417', 'GO:0006355')]
type(bp_gomap_2_df$ind[bp_gomap_2_df$values %in% c('GO:0009072', 'GO:0006417', 'GO:0006355')])
gene_table_bp %>% filter(GOID == 'GO:0000281')
bp_gomap_2_df %>% filter(values %in% gene_table_bp$GOID)
bp_gomap_2_df %>% filter(values %in% gene_table_bp$GOID) %>% select(ind)
bp_gomap_2_df %>% filter(values %in% gene_table_bp$GOID) %>% dplyr::select(ind)
gene_table_bp$go_slim_match <- bp_gomap_2_df %>% filter(values %in% gene_table_bp$GOID) %>% dplyr::select(ind)
bp_gomap_2_df %>% filter(values %in% gene_table_bp$GOID) %>% dplyr::select(ind)
bp_gomap_2_df %>% filter(values %in% gene_table_bp$GOID)
